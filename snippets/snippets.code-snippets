{
    "Genetic Algorithm Starter Template":{
        "prefix": "!geneticAlgo",
        "body" : [
            "import numpy",
            "genes = 2",
            "chromosomes = 10",
            "mattingPoolSize = 6",
            "offspringSize = chromosomes - mattingPoolSize",
            "lb = -5",
            "ub = 5",
            "populationSize = (chromosomes, genes)",
            "generations = 3",
            "population = numpy.random.uniform(lb, ub, populationSize)",
            "for generation in range(generations):",
            "    print((\"Generation:\", generation+1))",
            "    fitness = numpy.sum(population*population, axis=1)",
            "    print(\"\\npopulation\")",
            "    print(population)",
            "    print(\"\\nfitness calcuation\")",
            "    print(fitness)",
            "    parents = numpy.empty((mattingPoolSize, population.shape[1]))",
            "    for p in range(mattingPoolSize):",
            "       fittestIndex = numpy.where(fitness == numpy.max(fitness))",
            "       fittestIndex = fittestIndex[0][0]",
            "       parents[p, :] = population[fittestIndex, :]",
            "       fitness[fittestIndex] = -1",
            "       print(\"\\nParents:\")",
            "       print(parents)",
            "       offspring = numpy.empty((offspringSize, population.shape[1]))",
            "    for k in range(offspringSize):",
            "       crossoverPoint = numpy.random.randint(0,genes)",
            "       parent1Index = k%parents.shape[0]",
            "       parent2Index = (k+1)%parents.shape[0]",
            "       offspring[k, 0: crossoverPoint] = parents[parent1Index, 0: crossoverPoint]",
            "       offspring[k, crossoverPoint:] = parents[parent2Index, crossoverPoint:]",
            "    print(\"\\nOffspring after crossover:\")",
            "    print(offspring)",
            "    for index in range(offspring.shape[0]):",
            "       randomIndex = numpy.random.randint(1,genes)",
            "       randomValue = numpy.random.uniform(lb, ub, 1)",
            "       offspring [index, randomIndex] = offspring [index, randomIndex] + randomValue",
            "    print(\"\\n Offspring after Mutation\")",
            "    print(offspring)",
            "    population[0:parents.shape[0], :] = parents",
            "    population[parents.shape[0]:, :] = offspring",
            "    print(\"\\nNew Population for next generation:\")",
            "    print(population)",
            "fitness = numpy.sum(population*population, axis=1)",
            "fittestIndex = numpy.where(fitness == numpy.max(fitness))",
            "fittestIndex = fittestIndex[0][0]",
            "fittestInd = population[fittestIndex, :]",
            "bestFitness = fitness[fittestIndex]",
            "print(\"\\nBest Individual:\")",
            "print(fittestInd)",
            "print(\"\\nBest Individual's Fitness:\")",
            "print(bestFitness)"            
        ],
        "description": "Genetic Algorithm Starter Template"
    },
    "Descending order Assembly Language":{
        "prefix": "!descendingOrder",
        "body": [
            "MOV SI,1100H",
            "MOV CL,[SI]",
            "DEC CL",
            "REPEAT:",
            "MOV SI,1100H",
            "MOV CH,[SI]",
            "DEC CH",
            "INC SI",
            "RECOMP:",
            "MOV AL,[SI]",
            "INC SI",
            "CMP AL,[SI]",
            "JNC AHEAD"  ,              
            "XCHG AL,[SI]",
            "XCHG AL,[SI-1]",
            "AHEAD:",
            "DEC CH",
            "JNZ RECOMP",
            "DEC CL",
            "JNZ REPEAT",
            "HLT"  
        ],
        "description": "Descending order Assembly Language"
    },
    "Ascending order Assembly Language":{
        "prefix": "!ascendingOrder",
        "body": [
            "MOV SI,1100H",
            "MOV CL,[SI]",
            "DEC CL",
            "REPEAT:",
            "MOV SI,1100H",
            "MOV CH,[SI]",
            "DEC CH",
            "INC SI",
            "RECOMP:",
            "MOV AL,[SI]",
            "INC SI",
            "CMP AL,[SI]",
            "JC AHEAD",
            "XCHG AL,[SI]",
            "XCHG AL,[SI-1]",
            "AHEAD:",
            "DEC CH",
            "JNZ RECOMP",
            "DEC CL",
            "JNZ REPEAT",
            "HLT"
        ],
        "description": "Ascending order Assembly Language"
    },
    "Shortest Number Assembly Language":{
        "prefix": "!shortestNumber",
        "body": [
            "MOV SI,1100H",
            "MOV DI,1200H",
            "MOV CL,[SI]",
            "INC SI",
            "MOV AL,[SI]",
            "DEC CL",
            "AGAIN:",
            "INC SI",
            "MOV BL,[SI]",
            "CMP AL,BL",
            "JC AHEAD",         
            "MOV AL,BL",
            "AHEAD:",
            "DEC CL",
            "JNZ AGAIN",
            "MOV [DI],AL",
            "HLT"   
        ],
        "description": "Shortest Number Assembly Language"
    },
    "Largest Number Assembly Language":{
        "prefix": "!largestNumber",
        "body": [
            "MOV SI,1100H",
            "MOV DI,1200H",
            "MOV CL,[SI]",
            "INC SI",
            "MOV AL,[SI]",
            "DEC CL",
            "AGAIN:",
            "INC SI",
            "MOV BL,[SI]",
            "CMP AL,BL",
            "JNC AHEAD",
            "MOV AL,BL",
            "AHEAD:",
            "DEC CL",
            "JNZ AGAIN",
            "MOV [DI],AL",
            "HLT"
        ],
        "description": "Largest Number Assembly Language"
    },
    "Factorial without macros":{
        "prefix": "!factorialwithoutmacros",
        "body": [
            "DATA SEGMENT",
            "A DB 5",
            "fact DB ?",
            "DATA ENDS",
            "CODE SEGMENT",
            "         ASSUME DS:DATA,CS:CODE",
            "START:",
            "      MOV AX,DATA",
            "      MOV DS,AX",
            "      MOV AH,00",
            "      MOV AL,A",
            " L1:  DEC A",
            "      MUL A",
            "      MOV CL,A",
            "      CMP CL,01",
            "      JNZ L1",
            "      MOV fact, AL",
            "CODE ENDS",
            "END START"
            
        ],
        "description": "Factorial without macros"
    },
    "Factorial using macros":{
        "prefix": "!factorialwithmacros",
        "body": [
            "fact macro f",
            "    up:",
            "    mul f",
            "    dec f",
            "    jnz up",
            "endm",
            "data segment",
            "    num dw 05h",
            "    result dw ?",
            "ends",
            "stack segment",
            "    dw 128 dup(0)",
            "ends",
            "code segment",
            "    start:",
            "    mov ax,data",
            "    mov ds,ax",
            "    mov cx,num",
            "    mov ax, 0001h",
            "    fact num",
            "    mov result,ax",
            "ends"
        ],
        "description": "Factorial using macros"
    },
    "Python Gui":{
        "prefix": "!pythongui",
        "body": [
            "import tkinter as tk",
            "from tkinter import *",
            "root = tk.Tk()",
            "root.geometry('350x200')",
            "root.title('Login Form')",
            "label1 = tk.Label(root, text='Username: ')",
            "label1.grid()",
            "label2 = tk.Label(root, text='Password: ')",
            "print(type(label1))",
            "label2.grid()",
            "Username = tk.Entry(root, width=20)",
            "Password = tk.Entry(root, width=20)",
            "Username.grid(row=0, column=1)",
            "Password.grid(row=1, column=1)",
            "def SubmitForm(Username, Password):",
            "    user_list = []",
            "    pass_list = []",
            "    if Username not in user_list and Password not in pass_list:",
            "        user_list.append(Username)",
            "        pass_list.append(Password)",
            "        next_window = Toplevel(root)",
            "        next_window.geometry('350x200')",
            "        next_window.title('Showing User Details')",
            "        label5 = tk.Label(next_window, text='Username:')",
            "        label5.grid(row=0, column=0)",
            "        label6 = tk.Label(next_window, text='Password:')",
            "        label6.grid(row=1, column=0)",
            "        label3 = tk.Label(next_window, text=Username)",
            "        label3.grid(row=0, column=1)",
            "        label4 = tk.Label(next_window, text=Password)",
            "        label4.grid(row=1, column=1)",
            "def print_details():",
            "    Uss = Username.get()",
            "    passw = Password.get()",
            "    SubmitForm(Uss, passw)",
            "Button = tk.Button(root, text='Click for Submit', command=print_details)",
            "Button.grid(row=2, column=1)",
            "root.mainloop()"      
            
        ],
        "description": "Python Gui"
    },
    "Addition in assembly language":{
        "prefix": "!additionAssembly",
        "body": [
            "MOV AX,[1000H]",
            "MOV BX,[1002H]",
            "MOV CL,00H",
            "ADD AX,BX",
            "MOV [1004H],AX",
            "JNC JUMP",
            "INC CL",
            "JUMP:",
            "MOV [1006H],CL",
            "HLT"
        ],
        "description": "Addition in assembly language"        
    },
    "Subtraction in assembly language":{
        "prefix": "!subtractionAssembly",
        "body": [
            "MOV AX,[1000H]",
            "MOV BX,[1002H]",
            "MOV CL,00H",
            "SUB AX,BX",
            "JNC JUMP",
            "INC CL",
            "NOT AX",
            "ADD AX,0001H",
            "JUMP:",
            "MOV [1004H],AX",
            "MOV [1006H],CL",
            "HLT"         
        ],
        "description": "Subtraction in assembly language"        
    },
    "Multiplication in assembly language":{
        "prefix": "!multiplicationAssembly",
        "body": [
            "MOV SI,1100H",
            "MOV AX,[SI]",
            "MOV BX,[SI+2]",
            "MUL BX",
            "MOV [SI+4],AX",
            "MOV [SI+6],DX",
            "HLT"              
        ],
        "description": "Multiplication in assembly language"        
    },
    "Division in assembly language":{
        "prefix": "!divisionAssembly",
        "body": [
            "MOV SI,1100H",
            "MOV AX,[SI]",
            "MOV BX,[SI+2]",
            "DIV BX",
            "MOV [SI+6],AX",
            "MOV [SI+8],DX",
            "HLT"              
        ],
        "description": "Division in assembly language"        
    },
    "Simple Interest In Assembly Language":{
        "prefix": "!simpleInterestAssembly",
        "body": [
            "#include<stdio.h>",
            "#include<conio.h>",
            "#include<string.h>",
            "void main()",
            "{",
            "    int p, r, t, result, i,j;",
            "    clrscr();",
            "    printf(\"Enter Principal amount:\");",
            "    scanf(\"%d\",&p);",
            "    printf(\"Enter Rate of Interest:\");",
            "    scanf(\"%d\",&r);",
            "    printf(\"Enter Total time(in months):\");",
            "    scanf(\"%d\",&t);",
            "    asm mov ax,p;",
            "    asm mov bx,r;",
            "    asm mul bx;" ,
            "    asm mul t;",
            "    asm mov result,ax;",
            "    printf(\"Simple Interest:%d\\n\",result/100);",
            "    getch();",
            "}"
        ],
        "description": "Simple Interest In Assembly Language"        
    },
    "ExchangeDataSegment":{
        "prefix": "!exchangeDataSegment",
        "body": [
            "data segment",
            "src db 0x90, 0x34, 0x45, 0x21",
            "data ends",
            "extra segment ",
            "dest db ?",
            "extra ends",
            "code segment",
            "assume cs:code, ds:data, es:extra",
            "start:",
            "mov ax, data",
            "mov ds, ax",
            "mov ax, extra",
            "mov es, ax",
            "lea si, src",
            "lea di, dest",
            "mov cx, 0x04",
            "cld",
            "rep",
            "movsb",
            "end start",
            "code ends",
        ],
        "description": "ExchangeDataSegment"        
    },
    "Worst Fit Algorithm": {
        "prefix": "!worstfitpython",
        "body": [
            "def worstFit(blockSize, m, processSize, n):",
            "    allocation = [-1] * n",
            "    for i in range(n):",
            "        wstIdx = -1",
            "        for j in range(m):",
            "            if blockSize[j] >= processSize[i]:",
            "                if wstIdx == -1:",
            "                    wstIdx = j",
            "                elif blockSize[wstIdx] < blockSize[j]:",
            "                    wstIdx = j",
            "        if wstIdx != -1:",
            "            allocation[i] = wstIdx",
            "            blockSize[wstIdx] -= processSize[i]",
            "    print(\"Process No. Process Size Block no.\")",
            "    for i in range(n):",
            "        print(i + 1, \"         \", processSize[i], end = \"     \")",
            "        if allocation[i] != -1:",
            "            print(allocation[i] + 1)",
            "        else:",
            "            print(\"Not Allocated\")",
            "if __name__ == '__main__':",
            "    blockSize = [100, 500, 200, 300, 600]",
            "    processSize = [212, 417, 112, 426]",
            "    m = len(blockSize)",
            "    n = len(processSize)",
            "    worstFit(blockSize, m, processSize, n)",
        ],
        "description": "Worst Fit Algorithm" 
    },
    "First Fit Algorithm": {
        "prefix": "!firstfitpython",
        "body": [
            "def firstFit(blockSize, m, processSize, n):",
            "    allocation = [-1] * n",
            "    for i in range(n):",
            "        for j in range(m):",
            "            if blockSize[j] >= processSize[i]:",
            "                allocation[i] = j",
            "                blockSize[j] -= processSize[i]",
            "                break",
            "    print(\"Process No. Process Size      Block no.\")",
            "    for i in range(n):",
            "        print(\" \", i + 1, \"         \", processSize[i],\"         \", end = \" \")",
            "        if allocation[i] != -1:",
            "            print(allocation[i] + 1)",
            "        else:",
            "            print(\"Not Allocated\")",
            "if __name__ == '__main__':",
            "    blockSize = [100, 500, 200, 300, 600]",
            "    processSize = [212, 417, 112, 426]",
            "    m = len(blockSize)",
            "    n = len(processSize)",
            "    firstFit(blockSize, m, processSize, n)",
        ],
        "description": "First Fit Algorithm" 
    },
    "Best Fit Algorithm": {
        "prefix": "!bestfitpython",
        "body": [
            "def bestFit(blockSize, m, processSize, n):",
            "    allocation = [-1] * n",
            "    for i in range(n):",
            "        bestIdx = -1",
            "        for j in range(m):",
            "            if blockSize[j] >= processSize[i]:",
            "                if bestIdx == -1:",
            "                    bestIdx = j",
            "                elif blockSize[bestIdx] > blockSize[j]:",
            "                    bestIdx = j",
            "        if bestIdx != -1:",
            "            allocation[i] = bestIdx",
            "            blockSize[bestIdx] -= processSize[i]",
            "    print(\"Process No. Process Size      Block no.\")",
            "    for i in range(n):",
            "        print(i + 1, \"         \", processSize[i], end = \"     \")",
            "        if allocation[i] != -1:",
            "            print(allocation[i] + 1)",
            "        else:",
            "            print(\"Not Allocated\")",
            "if __name__ == '__main__':",
            "    blockSize = [100, 500, 200, 300, 600]",
            "    processSize = [212, 417, 112, 426]",
            "    m = len(blockSize)",
            "    n = len(processSize)",
            "    bestFit(blockSize, m, processSize, n)",
        ],
        "description": "Best Fit Algorithm" 
    },
    "Next Fit Algorithm": {
        "prefix": "!nextfitpython",
        "body": [
            "def NextFit(blockSize, m, processSize, n):",
            "    allocation = [-1] * n",
            "    j = 0",
            "    t = m-1",
            "    for i in range(n):",
            "        while j < m:",
            "            if blockSize[j] >= processSize[i]:",
            "                allocation[i] = j",
            "                blockSize[j] -= processSize[i]",
            "                t = (j - 1) % m",
            "                break",
            "            if t == j:",
            "                t = (j - 1) % m",
            "                break",
            "            j = (j + 1) % m",
            "    print(\"Process No. Process Size Block no.\")" ,
            "    for i in range(n):",
            "        print(i + 1, \"\\t\\t\", processSize[i],end = \"\\t \")",
            "        if allocation[i] != -1:",
            "            print(allocation[i] + 1)",
            "        else:",
            "            print(\"Not Allocated\")",
            "if __name__ == '__main__':",
            "    blockSize = [5, 10, 20]",
            "    processSize = [10, 20, 5]",
            "    m = len(blockSize)",
            "    n = len(processSize)",
            "    NextFit(blockSize, m, processSize, n)"
        ],
        "description": "Next Fit Algorithm" 
    },
    "Python Regex" : {
        "prefix": "!regexpython",
        "body": [
            "import re",
            "tp = open('myfile.txt', 'r')",
            "mail = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'",
            "number = r'\\S[^a-zA-Z\n]+\\d+\\S[^a-zA-Z\n]'",
            "sitee = r\"(http|https)://[\\w\\-]+(\\.[\\w\\-]+)+\\S*\"",
            "name = r'Mr.+|Mrs.+'",
            "m = tp.read()",
            "m = m.split('\n')",
            "mails = []",
            "numbers = []",
            "names = []",
            "for i in m:",
            "    if (re.match(mail, i)):",
            "        mails.append(i)",
            "    elif re.match(number, i):",
            "        numbers.append(i)",
            "    elif re.match(name, i):",
            "        names.append(i)",
            "print(\"Mails :\",mails,\"\\nNumbers:\", numbers,\"\\nNames:\", names,\"\\n\")",
        ],
        "description": "Python Regex"         
    },
    "Python Inheritance":{
        "prefix": "!inheritancepython",
        "body": [
            "class Employee:",
            "    def __init__(self,name,surname,ssn):",
            "        self.name = name",
            "        self.surname = surname",
            "        self.ssn = ssn",
            "class Developer(Employee):",
            "    def __init__(self, name, surname, ssn,stack,language):",
            "            super().__init__(name, surname, ssn)",
            "            self.stack = stack",
            "            self.language = language",
            "class Tester(Employee):",
            "    def __init__(self, name, surname, ssn,stack,language):",
            "            super().__init__(name, surname, ssn)",
            "            self.language = language",
            "            self.stack = stack",
            "class Role:",
            "    def __init__(self,role):",
            "        self.role = role",
            "class Manager(Employee,Role):",
            "    developer_list = []",
            "    tester_list = []",
            "    def __init__(self, name, surname, ssn,role):",
            "        super().__init__(self,name,surname,ssn,)",
            "        Role.__init__(self,role)",   
            "    def add_dev(self):",
            "        if self.role.lower() == \"developer\":",
            "            if self.name not in Manager.developer_list:",
            "                Manager.developer_list.append(self.name)",               
            "    def remove_dev(self):",
            "        if self.role.lower() == \"developer\":",
            "            if self.name  in Manager.tester_list:",
            "                Manager.developer_list.remove(self.name)",
            "    def add_tester(self):",
            "        if self.role.lower() == \"tester\":",
            "            if self.name not in Manager.tester_list:",
            "                Manager.tester_list.append(self.name)",               
            "    def remove_tester(self):",
            "        if self.role.lower() == \"tester\":",
            "            if self.name  in Manager.tester_list:",
            "                Manager.tester_list.remove(self.name)",
            "while True:",
            "    ssn_count = 1",
            "    print(\"*\"*50)",
            "    print(\"Welcome to the Employee Management System\")",
            "    emp_name = input(\"Enter your name: \")",
            "    emp_surname = input(\"Enter your surname: \")",
            "    manager_name = input(\"Enter your manager's name: \")",
            "    emp_role = input(f\"Hello {emp_name}! Please enter your role either developer or tester: \")",
            "    manager = Manager(name = manager_name,surname = emp_surname,ssn = ssn_count,role = emp_role,dept = \"Marketing\",stack =\"Data analysis\",language = \"Python\")",
            "    ssn_count+=1",
            "    print(\"*\"*50)",
            "    choice = int(input(\"Enter what do you want to do?\\n1.Add a developer\\n2.Remove a developer\\n3.Add a Tester\\n4.Remove a Tester\\n5.To exit\\n\"))",
            "    if choice ==1:",
            "        manager.add_dev()", 
            "    elif choice==2:",
            "        manager.remove_dev()",
            "    elif choice==3:",
            "        manager.add_tester()",
            "    elif choice==4:",
            "        manager.remove_tester()",
            "    else:",
            "        break",           
            "    exit = input(\"Would you like to end (y/n): \")",
            "    if exit == 'y':",
            "        break",
            "    else:",
            "        continue",
            "print(f\"Developer list is:{manager.developer_list}\")",
            "print(f\"Tester list is:{manager.tester_list}\")"
        ],
        "description": "Python Inheritance" 
    },
    "Client Server Python" : {
        "prefix": "!clientserverpython",
        "body": [
            "#Client",
            "import socket",
            "def mpm():",
            "    host = '127.0.0.1'",
            "    port = 6000",
            "    s = socket.socket()",
            "    s.connect((host, port))" , 
            "    while True:",
            "        x = input(\"Enter New Message : \")",
            "        y = x.encode('ascii')",
            "        s.send(y)",
            "        data = s.recv(1024)",
            "        d = data.decode('ascii')",
            "        print(\"Server: \",d)", 
            "mpm()",
            "#Sever",
            "import socket",
            "def mpm():",
            "    host = '127.0.0.1'",
            "    port = 6000",
            "    s = socket.socket()",
            "    s.bind((host, port))",
            "    s.listen(1)",
            "    c, addr = s.accept()" ,  
            "    print(\"Client Address : \", addr)" , 
            "    while True:",
            "        data = c.recv(1024)",
            "        d = data.decode('ascii')",
            "        print(\"Client: \", d)",
            "        x = input(\">>> \")",
            "        y = x.encode('ascii')",
            "        c.send(y)",
            "mpm()"
        ],
        "description": "Client Server Python" 
    }

}